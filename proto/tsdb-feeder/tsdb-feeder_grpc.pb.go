// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tsdbfeeder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TsdbFeederClient is the client API for TsdbFeeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TsdbFeederClient interface {
	GetDataRates(ctx context.Context, in *IPv4Addresses, opts ...grpc.CallOption) (TsdbFeeder_GetDataRatesClient, error)
}

type tsdbFeederClient struct {
	cc grpc.ClientConnInterface
}

func NewTsdbFeederClient(cc grpc.ClientConnInterface) TsdbFeederClient {
	return &tsdbFeederClient{cc}
}

func (c *tsdbFeederClient) GetDataRates(ctx context.Context, in *IPv4Addresses, opts ...grpc.CallOption) (TsdbFeeder_GetDataRatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TsdbFeeder_ServiceDesc.Streams[0], "/tsdbfeeder.TsdbFeeder/GetDataRates", opts...)
	if err != nil {
		return nil, err
	}
	x := &tsdbFeederGetDataRatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TsdbFeeder_GetDataRatesClient interface {
	Recv() (*DataRate, error)
	grpc.ClientStream
}

type tsdbFeederGetDataRatesClient struct {
	grpc.ClientStream
}

func (x *tsdbFeederGetDataRatesClient) Recv() (*DataRate, error) {
	m := new(DataRate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TsdbFeederServer is the server API for TsdbFeeder service.
// All implementations must embed UnimplementedTsdbFeederServer
// for forward compatibility
type TsdbFeederServer interface {
	GetDataRates(*IPv4Addresses, TsdbFeeder_GetDataRatesServer) error
	mustEmbedUnimplementedTsdbFeederServer()
}

// UnimplementedTsdbFeederServer must be embedded to have forward compatible implementations.
type UnimplementedTsdbFeederServer struct {
}

func (UnimplementedTsdbFeederServer) GetDataRates(*IPv4Addresses, TsdbFeeder_GetDataRatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDataRates not implemented")
}
func (UnimplementedTsdbFeederServer) mustEmbedUnimplementedTsdbFeederServer() {}

// UnsafeTsdbFeederServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TsdbFeederServer will
// result in compilation errors.
type UnsafeTsdbFeederServer interface {
	mustEmbedUnimplementedTsdbFeederServer()
}

func RegisterTsdbFeederServer(s grpc.ServiceRegistrar, srv TsdbFeederServer) {
	s.RegisterService(&TsdbFeeder_ServiceDesc, srv)
}

func _TsdbFeeder_GetDataRates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPv4Addresses)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TsdbFeederServer).GetDataRates(m, &tsdbFeederGetDataRatesServer{stream})
}

type TsdbFeeder_GetDataRatesServer interface {
	Send(*DataRate) error
	grpc.ServerStream
}

type tsdbFeederGetDataRatesServer struct {
	grpc.ServerStream
}

func (x *tsdbFeederGetDataRatesServer) Send(m *DataRate) error {
	return x.ServerStream.SendMsg(m)
}

// TsdbFeeder_ServiceDesc is the grpc.ServiceDesc for TsdbFeeder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TsdbFeeder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tsdbfeeder.TsdbFeeder",
	HandlerType: (*TsdbFeederServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDataRates",
			Handler:       _TsdbFeeder_GetDataRates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tsdb-feeder.proto",
}
