// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tsdb-feeder.proto

package tsdbfeeder

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IPv4Addresses struct {
	Ipv4Address          []string `protobuf:"bytes,1,rep,name=ipv4address,proto3" json:"ipv4address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPv4Addresses) Reset()         { *m = IPv4Addresses{} }
func (m *IPv4Addresses) String() string { return proto.CompactTextString(m) }
func (*IPv4Addresses) ProtoMessage()    {}
func (*IPv4Addresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6b7ce4a26e5b2fb, []int{0}
}

func (m *IPv4Addresses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPv4Addresses.Unmarshal(m, b)
}
func (m *IPv4Addresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPv4Addresses.Marshal(b, m, deterministic)
}
func (m *IPv4Addresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPv4Addresses.Merge(m, src)
}
func (m *IPv4Addresses) XXX_Size() int {
	return xxx_messageInfo_IPv4Addresses.Size(m)
}
func (m *IPv4Addresses) XXX_DiscardUnknown() {
	xxx_messageInfo_IPv4Addresses.DiscardUnknown(m)
}

var xxx_messageInfo_IPv4Addresses proto.InternalMessageInfo

func (m *IPv4Addresses) GetIpv4Address() []string {
	if m != nil {
		return m.Ipv4Address
	}
	return nil
}

type DataRate struct {
	DataRate             int64    `protobuf:"varint,1,opt,name=dataRate,proto3" json:"dataRate,omitempty"`
	Ipv4Address          string   `protobuf:"bytes,2,opt,name=ipv4address,proto3" json:"ipv4address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataRate) Reset()         { *m = DataRate{} }
func (m *DataRate) String() string { return proto.CompactTextString(m) }
func (*DataRate) ProtoMessage()    {}
func (*DataRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6b7ce4a26e5b2fb, []int{1}
}

func (m *DataRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRate.Unmarshal(m, b)
}
func (m *DataRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRate.Marshal(b, m, deterministic)
}
func (m *DataRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRate.Merge(m, src)
}
func (m *DataRate) XXX_Size() int {
	return xxx_messageInfo_DataRate.Size(m)
}
func (m *DataRate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRate.DiscardUnknown(m)
}

var xxx_messageInfo_DataRate proto.InternalMessageInfo

func (m *DataRate) GetDataRate() int64 {
	if m != nil {
		return m.DataRate
	}
	return 0
}

func (m *DataRate) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func init() {
	proto.RegisterType((*IPv4Addresses)(nil), "tsdbfeeder.IPv4Addresses")
	proto.RegisterType((*DataRate)(nil), "tsdbfeeder.DataRate")
}

func init() { proto.RegisterFile("tsdb-feeder.proto", fileDescriptor_f6b7ce4a26e5b2fb) }

var fileDescriptor_f6b7ce4a26e5b2fb = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x29, 0x4e, 0x49,
	0xd2, 0x4d, 0x4b, 0x4d, 0x4d, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02,
	0x09, 0x41, 0x44, 0x94, 0x0c, 0xb9, 0x78, 0x3d, 0x03, 0xca, 0x4c, 0x1c, 0x53, 0x52, 0x8a, 0x52,
	0x8b, 0x8b, 0x53, 0x8b, 0x85, 0x14, 0xb8, 0xb8, 0x33, 0x0b, 0xca, 0x4c, 0x12, 0x21, 0x02, 0x12,
	0x8c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0xc8, 0x42, 0x4a, 0x1e, 0x5c, 0x1c, 0x2e, 0x89, 0x25, 0x89,
	0x41, 0x89, 0x25, 0xa9, 0x42, 0x52, 0x5c, 0x1c, 0x29, 0x50, 0xb6, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x73, 0x10, 0x9c, 0x8f, 0x6e, 0x12, 0x93, 0x02, 0x23, 0x9a, 0x49, 0x46, 0x81, 0x5c, 0x5c, 0x21,
	0xc5, 0x29, 0x49, 0x6e, 0x60, 0xa7, 0x08, 0x39, 0x73, 0xf1, 0xb8, 0xa7, 0x96, 0xc0, 0x8c, 0x2e,
	0x16, 0x92, 0xd4, 0x43, 0xb8, 0x53, 0x0f, 0xc5, 0x91, 0x52, 0x22, 0xc8, 0x52, 0x30, 0x1d, 0x4a,
	0x0c, 0x06, 0x8c, 0x4e, 0x9e, 0x51, 0xee, 0xe9, 0x99, 0x25, 0x39, 0x89, 0x49, 0x7a, 0xf9, 0xc5,
	0x25, 0x7a, 0xc9, 0x19, 0xfa, 0x99, 0x79, 0xc5, 0xfa, 0x59, 0x89, 0x39, 0x89, 0x05, 0xa9, 0x79,
	0xf9, 0xba, 0x89, 0x05, 0x99, 0xfa, 0x48, 0xe1, 0xa1, 0x0f, 0x0e, 0x0f, 0x64, 0x11, 0x6b, 0x84,
	0xb9, 0x49, 0x6c, 0x60, 0x59, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0x26, 0x18, 0xe2,
	0x42, 0x01, 0x00, 0x00,
}
