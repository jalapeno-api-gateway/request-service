// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package graphdbfeeder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphDbFeederClient is the client API for GraphDbFeeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphDbFeederClient interface {
	GetNodes(ctx context.Context, in *NodeIds, opts ...grpc.CallOption) (GraphDbFeeder_GetNodesClient, error)
}

type graphDbFeederClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphDbFeederClient(cc grpc.ClientConnInterface) GraphDbFeederClient {
	return &graphDbFeederClient{cc}
}

func (c *graphDbFeederClient) GetNodes(ctx context.Context, in *NodeIds, opts ...grpc.CallOption) (GraphDbFeeder_GetNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GraphDbFeeder_ServiceDesc.Streams[0], "/graphdbfeeder.GraphDbFeeder/GetNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphDbFeederGetNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphDbFeeder_GetNodesClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type graphDbFeederGetNodesClient struct {
	grpc.ClientStream
}

func (x *graphDbFeederGetNodesClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GraphDbFeederServer is the server API for GraphDbFeeder service.
// All implementations must embed UnimplementedGraphDbFeederServer
// for forward compatibility
type GraphDbFeederServer interface {
	GetNodes(*NodeIds, GraphDbFeeder_GetNodesServer) error
	mustEmbedUnimplementedGraphDbFeederServer()
}

// UnimplementedGraphDbFeederServer must be embedded to have forward compatible implementations.
type UnimplementedGraphDbFeederServer struct {
}

func (UnimplementedGraphDbFeederServer) GetNodes(*NodeIds, GraphDbFeeder_GetNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedGraphDbFeederServer) mustEmbedUnimplementedGraphDbFeederServer() {}

// UnsafeGraphDbFeederServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphDbFeederServer will
// result in compilation errors.
type UnsafeGraphDbFeederServer interface {
	mustEmbedUnimplementedGraphDbFeederServer()
}

func RegisterGraphDbFeederServer(s grpc.ServiceRegistrar, srv GraphDbFeederServer) {
	s.RegisterService(&GraphDbFeeder_ServiceDesc, srv)
}

func _GraphDbFeeder_GetNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeIds)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphDbFeederServer).GetNodes(m, &graphDbFeederGetNodesServer{stream})
}

type GraphDbFeeder_GetNodesServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type graphDbFeederGetNodesServer struct {
	grpc.ServerStream
}

func (x *graphDbFeederGetNodesServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

// GraphDbFeeder_ServiceDesc is the grpc.ServiceDesc for GraphDbFeeder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphDbFeeder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graphdbfeeder.GraphDbFeeder",
	HandlerType: (*GraphDbFeederServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNodes",
			Handler:       _GraphDbFeeder_GetNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "graph-db-feeder.proto",
}
